{"ast":null,"code":"import * as React from 'react';\nimport rcWarning, { resetWarned as rcResetWarned } from \"rc-util/es/warning\";\nexport function noop() {}\nlet deprecatedWarnList = null;\nexport function resetWarned() {\n  deprecatedWarnList = null;\n  rcResetWarned();\n}\n// eslint-disable-next-line import/no-mutable-exports\nlet warning = noop;\nif (process.env.NODE_ENV !== 'production') {\n  warning = (valid, component, message) => {\n    rcWarning(valid, \"[antd: \".concat(component, \"] \").concat(message));\n    // StrictMode will inject console which will not throw warning in React 17.\n    if (process.env.NODE_ENV === 'test') {\n      resetWarned();\n    }\n  };\n}\nexport const WarningContext = /*#__PURE__*/React.createContext({});\n/**\r\n * This is a hook but we not named as `useWarning`\r\n * since this is only used in development.\r\n * We should always wrap this in `if (process.env.NODE_ENV !== 'production')` condition\r\n */\nexport const devUseWarning = process.env.NODE_ENV !== 'production' ? component => {\n  const {\n    strict\n  } = React.useContext(WarningContext);\n  const typeWarning = (valid, type, message) => {\n    if (!valid) {\n      if (strict === false && type === 'deprecated') {\n        const existWarning = deprecatedWarnList;\n        if (!deprecatedWarnList) {\n          deprecatedWarnList = {};\n        }\n        deprecatedWarnList[component] = deprecatedWarnList[component] || [];\n        if (!deprecatedWarnList[component].includes(message || '')) {\n          deprecatedWarnList[component].push(message || '');\n        }\n        // Warning for the first time\n        if (!existWarning) {\n          // eslint-disable-next-line no-console\n          console.warn('[antd] There exists deprecated usage in your code:', deprecatedWarnList);\n        }\n      } else {\n        process.env.NODE_ENV !== \"production\" ? warning(valid, component, message) : void 0;\n      }\n    }\n  };\n  typeWarning.deprecated = (valid, oldProp, newProp, message) => {\n    typeWarning(valid, 'deprecated', \"`\".concat(oldProp, \"` is deprecated. Please use `\").concat(newProp, \"` instead.\").concat(message ? \" \".concat(message) : ''));\n  };\n  return typeWarning;\n} : () => {\n  const noopWarning = () => {};\n  noopWarning.deprecated = noop;\n  return noopWarning;\n};\nexport default warning;","map":{"version":3,"names":["React","rcWarning","resetWarned","rcResetWarned","noop","deprecatedWarnList","warning","process","env","NODE_ENV","valid","component","message","concat","WarningContext","createContext","devUseWarning","strict","useContext","typeWarning","type","existWarning","includes","push","console","warn","deprecated","oldProp","newProp","noopWarning"],"sources":["C:/Users/user/Desktop/mcdonald-ec2/client/node_modules/antd/es/_util/warning.js"],"sourcesContent":["import * as React from 'react';\r\nimport rcWarning, { resetWarned as rcResetWarned } from \"rc-util/es/warning\";\r\nexport function noop() {}\r\nlet deprecatedWarnList = null;\r\nexport function resetWarned() {\r\n  deprecatedWarnList = null;\r\n  rcResetWarned();\r\n}\r\n// eslint-disable-next-line import/no-mutable-exports\r\nlet warning = noop;\r\nif (process.env.NODE_ENV !== 'production') {\r\n  warning = (valid, component, message) => {\r\n    rcWarning(valid, `[antd: ${component}] ${message}`);\r\n    // StrictMode will inject console which will not throw warning in React 17.\r\n    if (process.env.NODE_ENV === 'test') {\r\n      resetWarned();\r\n    }\r\n  };\r\n}\r\nexport const WarningContext = /*#__PURE__*/React.createContext({});\r\n/**\r\n * This is a hook but we not named as `useWarning`\r\n * since this is only used in development.\r\n * We should always wrap this in `if (process.env.NODE_ENV !== 'production')` condition\r\n */\r\nexport const devUseWarning = process.env.NODE_ENV !== 'production' ? component => {\r\n  const {\r\n    strict\r\n  } = React.useContext(WarningContext);\r\n  const typeWarning = (valid, type, message) => {\r\n    if (!valid) {\r\n      if (strict === false && type === 'deprecated') {\r\n        const existWarning = deprecatedWarnList;\r\n        if (!deprecatedWarnList) {\r\n          deprecatedWarnList = {};\r\n        }\r\n        deprecatedWarnList[component] = deprecatedWarnList[component] || [];\r\n        if (!deprecatedWarnList[component].includes(message || '')) {\r\n          deprecatedWarnList[component].push(message || '');\r\n        }\r\n        // Warning for the first time\r\n        if (!existWarning) {\r\n          // eslint-disable-next-line no-console\r\n          console.warn('[antd] There exists deprecated usage in your code:', deprecatedWarnList);\r\n        }\r\n      } else {\r\n        process.env.NODE_ENV !== \"production\" ? warning(valid, component, message) : void 0;\r\n      }\r\n    }\r\n  };\r\n  typeWarning.deprecated = (valid, oldProp, newProp, message) => {\r\n    typeWarning(valid, 'deprecated', `\\`${oldProp}\\` is deprecated. Please use \\`${newProp}\\` instead.${message ? ` ${message}` : ''}`);\r\n  };\r\n  return typeWarning;\r\n} : () => {\r\n  const noopWarning = () => {};\r\n  noopWarning.deprecated = noop;\r\n  return noopWarning;\r\n};\r\nexport default warning;"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,SAAS,IAAIC,WAAW,IAAIC,aAAa,QAAQ,oBAAoB;AAC5E,OAAO,SAASC,IAAIA,CAAA,EAAG,CAAC;AACxB,IAAIC,kBAAkB,GAAG,IAAI;AAC7B,OAAO,SAASH,WAAWA,CAAA,EAAG;EAC5BG,kBAAkB,GAAG,IAAI;EACzBF,aAAa,CAAC,CAAC;AACjB;AACA;AACA,IAAIG,OAAO,GAAGF,IAAI;AAClB,IAAIG,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;EACzCH,OAAO,GAAGA,CAACI,KAAK,EAAEC,SAAS,EAAEC,OAAO,KAAK;IACvCX,SAAS,CAACS,KAAK,YAAAG,MAAA,CAAYF,SAAS,QAAAE,MAAA,CAAKD,OAAO,CAAE,CAAC;IACnD;IACA,IAAIL,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,MAAM,EAAE;MACnCP,WAAW,CAAC,CAAC;IACf;EACF,CAAC;AACH;AACA,OAAO,MAAMY,cAAc,GAAG,aAAad,KAAK,CAACe,aAAa,CAAC,CAAC,CAAC,CAAC;AAClE;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,aAAa,GAAGT,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGE,SAAS,IAAI;EAChF,MAAM;IACJM;EACF,CAAC,GAAGjB,KAAK,CAACkB,UAAU,CAACJ,cAAc,CAAC;EACpC,MAAMK,WAAW,GAAGA,CAACT,KAAK,EAAEU,IAAI,EAAER,OAAO,KAAK;IAC5C,IAAI,CAACF,KAAK,EAAE;MACV,IAAIO,MAAM,KAAK,KAAK,IAAIG,IAAI,KAAK,YAAY,EAAE;QAC7C,MAAMC,YAAY,GAAGhB,kBAAkB;QACvC,IAAI,CAACA,kBAAkB,EAAE;UACvBA,kBAAkB,GAAG,CAAC,CAAC;QACzB;QACAA,kBAAkB,CAACM,SAAS,CAAC,GAAGN,kBAAkB,CAACM,SAAS,CAAC,IAAI,EAAE;QACnE,IAAI,CAACN,kBAAkB,CAACM,SAAS,CAAC,CAACW,QAAQ,CAACV,OAAO,IAAI,EAAE,CAAC,EAAE;UAC1DP,kBAAkB,CAACM,SAAS,CAAC,CAACY,IAAI,CAACX,OAAO,IAAI,EAAE,CAAC;QACnD;QACA;QACA,IAAI,CAACS,YAAY,EAAE;UACjB;UACAG,OAAO,CAACC,IAAI,CAAC,oDAAoD,EAAEpB,kBAAkB,CAAC;QACxF;MACF,CAAC,MAAM;QACLE,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGH,OAAO,CAACI,KAAK,EAAEC,SAAS,EAAEC,OAAO,CAAC,GAAG,KAAK,CAAC;MACrF;IACF;EACF,CAAC;EACDO,WAAW,CAACO,UAAU,GAAG,CAAChB,KAAK,EAAEiB,OAAO,EAAEC,OAAO,EAAEhB,OAAO,KAAK;IAC7DO,WAAW,CAACT,KAAK,EAAE,YAAY,MAAAG,MAAA,CAAOc,OAAO,mCAAAd,MAAA,CAAkCe,OAAO,gBAAAf,MAAA,CAAcD,OAAO,OAAAC,MAAA,CAAOD,OAAO,IAAK,EAAE,CAAE,CAAC;EACrI,CAAC;EACD,OAAOO,WAAW;AACpB,CAAC,GAAG,MAAM;EACR,MAAMU,WAAW,GAAGA,CAAA,KAAM,CAAC,CAAC;EAC5BA,WAAW,CAACH,UAAU,GAAGtB,IAAI;EAC7B,OAAOyB,WAAW;AACpB,CAAC;AACD,eAAevB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}