{"ast":null,"code":"import React,{useEffect,useState}from'react';import axios from'axios';import'./FarmToRestaurant.scss';import{API_URL}from'../../../../config/contansts';// gorupBy 함수 선언하고 매개변수 array, key를 받음.\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const groupBy=(array,key)=>{// reduce 메서드를 사용해서 배열 순회하면ㅅ 그룹화 작업 수행.\n// result는 결과. currentValue는 현재 배열 요소 나태냄.\nreturn array.reduce((result,currentValue)=>{// 현재 요소 key에 해당하느 값이 result 객체에 조재하며 배열, 그렇지 않으면 빈 배열. / 현재 요소 currentValue를 그룹 배열에 추가\n(result[currentValue[key]]=result[currentValue[key]]||[]).push(currentValue);// reduce가 끝나면 결과 반환\nreturn result;},{});};// ex) { name: '임헌성', age: '40' }이면 groupBy(array, 'age')를 하면 그룹화 가능\n// filter랑 비슷해서 써봤는데 더 복잡함. 숙련도 이슈.\nconst Effort=()=>{const[categoriesData,setCategoriesData]=useState([]);const[groupedCategories,setGroupedCategories]=useState({});useEffect(()=>{axios.get(\"\".concat(API_URL,\"/api/effort\")).then(response=>{setCategoriesData(response.data);}).catch(error=>{console.error('Error:',error);});},[]);useEffect(()=>{setGroupedCategories(groupBy(categoriesData,'title'));},[categoriesData]);// caategoriesData에 name을 그룹화, 그 후 categoriesData(의존성 배열)이 바뀌면 실행\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"effort-container\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"\\uB808\\uC2A4\\uD1A0\\uB791\\uC5D0 \\uB3C4\\uCC29\\uD55C \\uC2DD\\uC7AC\\uB8CC\\uB294 \\uC5B4\\uB5BB\\uAC8C \\uAD00\\uB9AC\\uB420\\uAE4C\\uC694?\"}),/*#__PURE__*/_jsxs(\"h3\",{children:[\"\\uB808\\uC2A4\\uD1A0\\uB791\\uC73C\\uB85C \\uBC30\\uC1A1\\uB41C \\uC2DD\\uC7AC\\uB8CC\\uAC00 \\uC74C\\uC2DD\\uC73C\\uB85C \\uC870\\uB9AC\\uB418\\uC5B4 \\uACE0\\uAC1D\\uC5D0\\uAC8C \\uC804\\uB2EC\\uB418\\uB294 \\uC21C\\uAC04\\uAE4C\\uC9C0\",/*#__PURE__*/_jsx(\"br\",{}),\" \\uB9E5\\uB3C4\\uB0A0\\uB4DC\\uC758 \\uB178\\uB825\\uC740 \\uBA48\\uCD94\\uC9C0 \\uC54A\\uC2B5\\uB2C8\\uB2E4.\"]}),Object.keys(groupedCategories).map(title=>/*#__PURE__*/_jsxs(\"div\",{className:\"effort-category\",children:[/*#__PURE__*/_jsx(\"h2\",{children:title}),/*#__PURE__*/_jsx(\"div\",{className:\"yellowbox\",children:groupedCategories[title][0].title_description}),groupedCategories[title].map(category=>/*#__PURE__*/_jsxs(\"div\",{className:\"effort-item\",children:[/*#__PURE__*/_jsx(\"img\",{src:API_URL+category.img_url,alt:\"Item Image \".concat(category.id)}),/*#__PURE__*/_jsx(\"strong\",{children:category.sub_title}),/*#__PURE__*/_jsx(\"p\",{children:category.sub_title_description})]},category.id))]},title)),/*#__PURE__*/_jsx(\"div\",{className:\"btnARa\",children:/*#__PURE__*/_jsx(\"button\",{children:\"\\uB9E5\\uB3C4\\uB0A0\\uB4DC\\uC758 \\uC74C\\uC2DD\\uACFC \\uC7AC\\uB8CC\\uC5D0 \\uB300\\uD574 \\uB354 \\uAD81\\uAE08\\uD55C \\uC810\\uC774 \\uC788\\uB2E4\\uBA74?\"})})]});};export default Effort;","map":{"version":3,"names":["React","useEffect","useState","axios","API_URL","jsx","_jsx","jsxs","_jsxs","groupBy","array","key","reduce","result","currentValue","push","Effort","categoriesData","setCategoriesData","groupedCategories","setGroupedCategories","get","concat","then","response","data","catch","error","console","className","children","Object","keys","map","title","title_description","category","src","img_url","alt","id","sub_title","sub_title_description"],"sources":["C:/Users/user/Desktop/mcdonald-ec2/client/src/page/Story/Competition/FarmToRestaurant/Effort.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport './FarmToRestaurant.scss';\r\nimport { API_URL } from '../../../../config/contansts';\r\n\r\n// gorupBy 함수 선언하고 매개변수 array, key를 받음.\r\nconst groupBy = (array, key) => {\r\n  // reduce 메서드를 사용해서 배열 순회하면ㅅ 그룹화 작업 수행.\r\n  // result는 결과. currentValue는 현재 배열 요소 나태냄.\r\n  return array.reduce((result, currentValue) => {\r\n    // 현재 요소 key에 해당하느 값이 result 객체에 조재하며 배열, 그렇지 않으면 빈 배열. / 현재 요소 currentValue를 그룹 배열에 추가\r\n    (result[currentValue[key]] = result[currentValue[key]] || []).push(currentValue);\r\n    // reduce가 끝나면 결과 반환\r\n    return result;\r\n  }, {});\r\n};\r\n// ex) { name: '임헌성', age: '40' }이면 groupBy(array, 'age')를 하면 그룹화 가능\r\n// filter랑 비슷해서 써봤는데 더 복잡함. 숙련도 이슈.\r\n\r\nconst Effort = () => {\r\n  const [categoriesData, setCategoriesData] = useState([]);\r\n  const [groupedCategories, setGroupedCategories] = useState({});\r\n\r\n  useEffect(() => {\r\n    axios.get(`${API_URL}/api/effort`)\r\n      .then(response => {\r\n        setCategoriesData(response.data);\r\n      })\r\n      .catch(error => {\r\n        console.error('Error:', error);\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setGroupedCategories(groupBy(categoriesData, 'title'));\r\n  }, [categoriesData]);\r\n  // caategoriesData에 name을 그룹화, 그 후 categoriesData(의존성 배열)이 바뀌면 실행\r\n\r\n  return (\r\n    <div className=\"effort-container\">\r\n      <h1>레스토랑에 도착한 식재료는 어떻게 관리될까요?</h1>\r\n      <h3>\r\n        레스토랑으로 배송된 식재료가 음식으로 조리되어 고객에게 전달되는 순간까지<br></br> 맥도날드의 노력은 멈추지 않습니다.\r\n      </h3>\r\n      {/* Object.keys 함수는 주어진 객체의 모든 열거 가능한 속성 이름을 담은 배열을 반환함. */}\r\n      {Object.keys(groupedCategories).map((title) => (\r\n        <div key={title} className=\"effort-category\">\r\n          <h2>{title}</h2>\r\n          <div className='yellowbox'>{groupedCategories[title][0].title_description}</div>\r\n          {groupedCategories[title].map((category) => (\r\n            <div key={category.id} className=\"effort-item\">\r\n              <img src={API_URL + category.img_url} alt={`Item Image ${category.id}`} />\r\n              <strong>{category.sub_title}</strong>\r\n              <p>{category.sub_title_description}</p>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      ))}\r\n      <div className='btnARa'><button>맥도날드의 음식과 재료에 대해 더 궁금한 점이 있다면?</button></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Effort;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}